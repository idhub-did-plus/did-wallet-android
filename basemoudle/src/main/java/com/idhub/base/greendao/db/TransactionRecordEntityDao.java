package com.idhub.base.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.idhub.base.greendao.entity.TransactionRecordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_RECORD_ENTITY".
*/
public class TransactionRecordEntityDao extends AbstractDao<TransactionRecordEntity, Long> {

    public static final String TABLENAME = "TRANSACTION_RECORD_ENTITY";

    /**
     * Properties of entity TransactionRecordEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property From = new Property(1, String.class, "from", false, "FROM");
        public final static Property To = new Property(2, String.class, "to", false, "TO");
        public final static Property BlockNumber = new Property(3, long.class, "blockNumber", false, "BLOCK_NUMBER");
        public final static Property TimeStamp = new Property(4, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Nonce = new Property(5, long.class, "nonce", false, "NONCE");
        public final static Property Value = new Property(6, String.class, "value", false, "VALUE");
        public final static Property Gas = new Property(7, String.class, "gas", false, "GAS");
        public final static Property GasUsed = new Property(8, String.class, "gasUsed", false, "GAS_USED");
        public final static Property GasPrice = new Property(9, String.class, "gasPrice", false, "GAS_PRICE");
        public final static Property TokenName = new Property(10, String.class, "tokenName", false, "TOKEN_NAME");
        public final static Property TokenSymbol = new Property(11, String.class, "tokenSymbol", false, "TOKEN_SYMBOL");
        public final static Property TokenDecimal = new Property(12, String.class, "tokenDecimal", false, "TOKEN_DECIMAL");
        public final static Property ContractAddress = new Property(13, String.class, "contractAddress", false, "CONTRACT_ADDRESS");
        public final static Property Hash = new Property(14, String.class, "hash", false, "HASH");
    }


    public TransactionRecordEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionRecordEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_RECORD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FROM\" TEXT," + // 1: from
                "\"TO\" TEXT," + // 2: to
                "\"BLOCK_NUMBER\" INTEGER NOT NULL ," + // 3: blockNumber
                "\"TIME_STAMP\" TEXT," + // 4: timeStamp
                "\"NONCE\" INTEGER NOT NULL ," + // 5: nonce
                "\"VALUE\" TEXT," + // 6: value
                "\"GAS\" TEXT," + // 7: gas
                "\"GAS_USED\" TEXT," + // 8: gasUsed
                "\"GAS_PRICE\" TEXT," + // 9: gasPrice
                "\"TOKEN_NAME\" TEXT," + // 10: tokenName
                "\"TOKEN_SYMBOL\" TEXT," + // 11: tokenSymbol
                "\"TOKEN_DECIMAL\" TEXT," + // 12: tokenDecimal
                "\"CONTRACT_ADDRESS\" TEXT," + // 13: contractAddress
                "\"HASH\" TEXT);"); // 14: hash
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_RECORD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(2, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(3, to);
        }
        stmt.bindLong(4, entity.getBlockNumber());
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
        stmt.bindLong(6, entity.getNonce());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(7, value);
        }
 
        String gas = entity.getGas();
        if (gas != null) {
            stmt.bindString(8, gas);
        }
 
        String gasUsed = entity.getGasUsed();
        if (gasUsed != null) {
            stmt.bindString(9, gasUsed);
        }
 
        String gasPrice = entity.getGasPrice();
        if (gasPrice != null) {
            stmt.bindString(10, gasPrice);
        }
 
        String tokenName = entity.getTokenName();
        if (tokenName != null) {
            stmt.bindString(11, tokenName);
        }
 
        String tokenSymbol = entity.getTokenSymbol();
        if (tokenSymbol != null) {
            stmt.bindString(12, tokenSymbol);
        }
 
        String tokenDecimal = entity.getTokenDecimal();
        if (tokenDecimal != null) {
            stmt.bindString(13, tokenDecimal);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(14, contractAddress);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(15, hash);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(2, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(3, to);
        }
        stmt.bindLong(4, entity.getBlockNumber());
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
        stmt.bindLong(6, entity.getNonce());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(7, value);
        }
 
        String gas = entity.getGas();
        if (gas != null) {
            stmt.bindString(8, gas);
        }
 
        String gasUsed = entity.getGasUsed();
        if (gasUsed != null) {
            stmt.bindString(9, gasUsed);
        }
 
        String gasPrice = entity.getGasPrice();
        if (gasPrice != null) {
            stmt.bindString(10, gasPrice);
        }
 
        String tokenName = entity.getTokenName();
        if (tokenName != null) {
            stmt.bindString(11, tokenName);
        }
 
        String tokenSymbol = entity.getTokenSymbol();
        if (tokenSymbol != null) {
            stmt.bindString(12, tokenSymbol);
        }
 
        String tokenDecimal = entity.getTokenDecimal();
        if (tokenDecimal != null) {
            stmt.bindString(13, tokenDecimal);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(14, contractAddress);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(15, hash);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransactionRecordEntity readEntity(Cursor cursor, int offset) {
        TransactionRecordEntity entity = new TransactionRecordEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // from
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // to
            cursor.getLong(offset + 3), // blockNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timeStamp
            cursor.getLong(offset + 5), // nonce
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // value
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gas
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gasUsed
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gasPrice
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tokenName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tokenSymbol
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tokenDecimal
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // contractAddress
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // hash
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionRecordEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrom(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlockNumber(cursor.getLong(offset + 3));
        entity.setTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNonce(cursor.getLong(offset + 5));
        entity.setValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGas(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGasUsed(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGasPrice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTokenName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTokenSymbol(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTokenDecimal(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setContractAddress(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHash(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionRecordEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionRecordEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionRecordEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
