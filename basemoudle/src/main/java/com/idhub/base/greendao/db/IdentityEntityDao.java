package com.idhub.base.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.idhub.base.greendao.entity.IdentityEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IDENTITY_ENTITY".
*/
public class IdentityEntityDao extends AbstractDao<IdentityEntity, Long> {

    public static final String TABLENAME = "IDENTITY_ENTITY";

    /**
     * Properties of entity IdentityEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Node = new Property(1, String.class, "node", false, "NODE");
        public final static Property IdentityAddress = new Property(2, String.class, "identityAddress", false, "IDENTITY_ADDRESS");
        public final static Property RecoveryAddress = new Property(3, String.class, "recoveryAddress", false, "RECOVERY_ADDRESS");
        public final static Property EIN = new Property(4, String.class, "EIN", false, "EIN");
        public final static Property IsAssociate = new Property(5, boolean.class, "isAssociate", false, "IS_ASSOCIATE");
        public final static Property IsDefaultAddress = new Property(6, boolean.class, "isDefaultAddress", false, "IS_DEFAULT_ADDRESS");
    }


    public IdentityEntityDao(DaoConfig config) {
        super(config);
    }
    
    public IdentityEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IDENTITY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NODE\" TEXT," + // 1: node
                "\"IDENTITY_ADDRESS\" TEXT," + // 2: identityAddress
                "\"RECOVERY_ADDRESS\" TEXT," + // 3: recoveryAddress
                "\"EIN\" TEXT," + // 4: EIN
                "\"IS_ASSOCIATE\" INTEGER NOT NULL ," + // 5: isAssociate
                "\"IS_DEFAULT_ADDRESS\" INTEGER NOT NULL );"); // 6: isDefaultAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IDENTITY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IdentityEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String node = entity.getNode();
        if (node != null) {
            stmt.bindString(2, node);
        }
 
        String identityAddress = entity.getIdentityAddress();
        if (identityAddress != null) {
            stmt.bindString(3, identityAddress);
        }
 
        String recoveryAddress = entity.getRecoveryAddress();
        if (recoveryAddress != null) {
            stmt.bindString(4, recoveryAddress);
        }
 
        String EIN = entity.getEIN();
        if (EIN != null) {
            stmt.bindString(5, EIN);
        }
        stmt.bindLong(6, entity.getIsAssociate() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsDefaultAddress() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IdentityEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String node = entity.getNode();
        if (node != null) {
            stmt.bindString(2, node);
        }
 
        String identityAddress = entity.getIdentityAddress();
        if (identityAddress != null) {
            stmt.bindString(3, identityAddress);
        }
 
        String recoveryAddress = entity.getRecoveryAddress();
        if (recoveryAddress != null) {
            stmt.bindString(4, recoveryAddress);
        }
 
        String EIN = entity.getEIN();
        if (EIN != null) {
            stmt.bindString(5, EIN);
        }
        stmt.bindLong(6, entity.getIsAssociate() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsDefaultAddress() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IdentityEntity readEntity(Cursor cursor, int offset) {
        IdentityEntity entity = new IdentityEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // node
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // identityAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // recoveryAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EIN
            cursor.getShort(offset + 5) != 0, // isAssociate
            cursor.getShort(offset + 6) != 0 // isDefaultAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IdentityEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdentityAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecoveryAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEIN(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsAssociate(cursor.getShort(offset + 5) != 0);
        entity.setIsDefaultAddress(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IdentityEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IdentityEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IdentityEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
