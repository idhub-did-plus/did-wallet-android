package com.idhub.base.greendao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.idhub.base.greendao.entity.AssetsContractAddress;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSETS_CONTRACT_ADDRESS".
*/
public class AssetsContractAddressDao extends AbstractDao<AssetsContractAddress, Long> {

    public static final String TABLENAME = "ASSETS_CONTRACT_ADDRESS";

    /**
     * Properties of entity AssetsContractAddress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Node = new Property(1, String.class, "node", false, "node");
        public final static Property ContractAddress = new Property(2, String.class, "contractAddress", false, "contractAddress");
        public final static Property AssetsId = new Property(3, Long.class, "assetsId", false, "assetsId");
    }

    private Query<AssetsContractAddress> assetsModel_ContractAddressesQuery;

    public AssetsContractAddressDao(DaoConfig config) {
        super(config);
    }
    
    public AssetsContractAddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSETS_CONTRACT_ADDRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"node\" TEXT," + // 1: node
                "\"contractAddress\" TEXT," + // 2: contractAddress
                "\"assetsId\" INTEGER);"); // 3: assetsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSETS_CONTRACT_ADDRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssetsContractAddress entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String node = entity.getNode();
        if (node != null) {
            stmt.bindString(2, node);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(3, contractAddress);
        }
 
        Long assetsId = entity.getAssetsId();
        if (assetsId != null) {
            stmt.bindLong(4, assetsId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssetsContractAddress entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String node = entity.getNode();
        if (node != null) {
            stmt.bindString(2, node);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(3, contractAddress);
        }
 
        Long assetsId = entity.getAssetsId();
        if (assetsId != null) {
            stmt.bindLong(4, assetsId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssetsContractAddress readEntity(Cursor cursor, int offset) {
        AssetsContractAddress entity = new AssetsContractAddress( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // node
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contractAddress
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // assetsId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssetsContractAddress entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContractAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAssetsId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssetsContractAddress entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssetsContractAddress entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssetsContractAddress entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "contractAddresses" to-many relationship of AssetsModel. */
    public List<AssetsContractAddress> _queryAssetsModel_ContractAddresses(Long assetsId) {
        synchronized (this) {
            if (assetsModel_ContractAddressesQuery == null) {
                QueryBuilder<AssetsContractAddress> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AssetsId.eq(null));
                assetsModel_ContractAddressesQuery = queryBuilder.build();
            }
        }
        Query<AssetsContractAddress> query = assetsModel_ContractAddressesQuery.forCurrentThread();
        query.setParameter(0, assetsId);
        return query.list();
    }

}
