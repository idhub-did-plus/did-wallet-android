package com.idhub.base.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.idhub.base.greendao.entity.IdHubMessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ID_HUB_MESSAGE_ENTITY".
*/
public class IdHubMessageEntityDao extends AbstractDao<IdHubMessageEntity, Long> {

    public static final String TABLENAME = "ID_HUB_MESSAGE_ENTITY";

    /**
     * Properties of entity IdHubMessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property RecoverAddress = new Property(3, String.class, "recoverAddress", false, "RECOVER_ADDRESS");
        public final static Property DefaultAddress = new Property(4, String.class, "defaultAddress", false, "DEFAULT_ADDRESS");
        public final static Property Ein = new Property(5, String.class, "ein", false, "EIN");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
    }


    public IdHubMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public IdHubMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ID_HUB_MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"ADDRESS\" TEXT," + // 2: address
                "\"RECOVER_ADDRESS\" TEXT," + // 3: recoverAddress
                "\"DEFAULT_ADDRESS\" TEXT," + // 4: defaultAddress
                "\"EIN\" TEXT," + // 5: ein
                "\"TIME\" TEXT);"); // 6: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ID_HUB_MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IdHubMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String recoverAddress = entity.getRecoverAddress();
        if (recoverAddress != null) {
            stmt.bindString(4, recoverAddress);
        }
 
        String defaultAddress = entity.getDefaultAddress();
        if (defaultAddress != null) {
            stmt.bindString(5, defaultAddress);
        }
 
        String ein = entity.getEin();
        if (ein != null) {
            stmt.bindString(6, ein);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IdHubMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String recoverAddress = entity.getRecoverAddress();
        if (recoverAddress != null) {
            stmt.bindString(4, recoverAddress);
        }
 
        String defaultAddress = entity.getDefaultAddress();
        if (defaultAddress != null) {
            stmt.bindString(5, defaultAddress);
        }
 
        String ein = entity.getEin();
        if (ein != null) {
            stmt.bindString(6, ein);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IdHubMessageEntity readEntity(Cursor cursor, int offset) {
        IdHubMessageEntity entity = new IdHubMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // recoverAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // defaultAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ein
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IdHubMessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecoverAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDefaultAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IdHubMessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IdHubMessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IdHubMessageEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
